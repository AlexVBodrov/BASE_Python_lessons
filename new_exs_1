class StackObj:
    # для описания объектов односвязного списка;
    def __init__(self, data) -> None:
        self.__data = data
        self.__next = None

    @property
    def data(self):
        return self.__data

    @data.setter
    def data(self, value):
        self.__data = value

    @property
    def next(self):
        return self.__next

    @next.setter
    def next(self, obj):
        if isinstance(obj, StackObj) or obj is None:
            self.__next = obj


class Stack:
    # для управления односвязным списком.
    def __init__(self) -> None:
        self.top = None
        self.last = None

    def push(self, obj):
        if self.last:
            self.last.next = obj
        self.last = obj
        if self.top is None:
            self.top = obj

    def pop(self):
        h = self.top
        if h is None:
            return
        while h and h.next != self.last:
            h = h.next
        if h:
            h.next = None
        last = self.last
        self.last = h
        if self.last is None:
            self.top = None
        return last

    def get_data(self):
        s = []
        h = self.top
        while h:
            s.append(h.data)
            h = h.next
        return s


st = Stack()
st.push(StackObj("obj1"))
st.push(StackObj("obj2"))
st.push(StackObj("obj3"))
st.pop()
res = st.get_data()  # ['obj1', 'obj2']


class RadiusVector2D:

    MIN_COORD = -100
    MAX_COORD = 1024

    # v1 = RadiusVector2D()        # радиус-вектор с координатами (0; 0)
    # v2 = RadiusVector2D(1)       # радиус-вектор с координатами (1; 0)
    # v3 = RadiusVector2D(1, 2)    # радиус-вектор с координатами (1; 2)

    def __init__(self, x=0, y=0):
        if self.check_coord(x) and self.check_coord(y):
            self.__x = x
            self.__y = y
        else:
            self.__x = self.__y = 0

    @classmethod
    def check_coord(cls, num) -> bool:
        if type(num) in (int, float) and cls.MIN_COORD <= num <= cls.MAX_COORD:
            return True
        else:
            return False

    @property
    def x(self):
        # для изменения и считывания локального атрибута __x;
        return self.__x

    @x.setter
    def x(self, x):
        if self.check_coord(x):
            self.__x = x

    @property
    def y(self):
        # для изменения и считывания локального атрибута __y.
        return self.__y

    @y.setter
    def y(self, y):
        if self.check_coord(y):
            self.__y = y

    @staticmethod
    def norm2(vector):
        # для вычисления квадратической нормы vector
        # переданного объекта класса RadiusVector2D
        # (квадратическая норма вектора: x*x + y*y)
        return vector.x * vector.x + vector.y * vector.y


r5 = RadiusVector2D(-102, 2000)


class TreeObj:
    # для описания вершин и листьев решающего дерева;
    def __init__(self, index, value=None):
        # где indx - проверяемый в вершине дерева индекс вектора x; value - значение, хранящееся в вершине (принимает значение None для вершин, у которых есть потомки - промежуточных вершин).
        # При этом, в каждом создаваемом объекте класса TreeObj должны автоматически появляться следующие локальные атрибуты:
        """
        indx - проверяемый индекс (целое число);
        value - значение с данными (строка);
        __left - ссылка на следующий объект дерева по левой ветви (изначально None);
        __right - ссылка на следующий объект дерева по правой ветви (изначально None).
        """
        self.index = index
        self.value = value
        self.left = self.right = None

    @property
    def left(self):
        return self.__left

    @left.setter
    def left(self, obj):
        self.__left = obj

    @property
    def right(self):
        return self.__right

    @right.setter
    def right(self, obj):
        self.__right = obj


class DecisionTree:
    # для работы с решающим деревом в целом.

    @classmethod
    def predict(cls, root, x):
        # для построения прогноза (прохода по решающему дереву)
        # для вектора x из корневого узла дерева root.
        obj = root
        while obj:
            obj_next = cls.get_next(obj, x)
            if obj_next is None:
                break
            obj = obj_next
        return obj.value

    @classmethod
    def get_next(cls, obj, x):
        if x[obj.index] == 1:
            return obj.left
        return obj.right

    @classmethod
    def add_obj(cls, obj, node=None, left=True):
        # для добавления вершин в решающее дерево
        # (метод должен возвращать добавленную вершину
        # объект класса TreeObj);
        # obj - ссылка на новый (добавляемый) объект решающего дерева (объект класса TreeObj);
        # node - ссылка на объект дерева, к которому присоединяется вершина obj;
        # left - флаг, определяющий ветвь дерева (объекта node), к которой присоединяется объект obj (True - к левой ветви; False - к правой).
        if node:
            if left:
                node.left = obj
            else:
                node.right = obj
        return obj


root = DecisionTree.add_obj(TreeObj(0))
v_11 = DecisionTree.add_obj(TreeObj(1), root)
v_12 = DecisionTree.add_obj(TreeObj(2), root, False)
DecisionTree.add_obj(TreeObj(-1, "будет программистом"), v_11)
DecisionTree.add_obj(TreeObj(-1, "будет кодером"), v_11, False)
DecisionTree.add_obj(TreeObj(-1, "не все потеряно"), v_12)
DecisionTree.add_obj(TreeObj(-1, "безнадежен"), v_12, False)

x = [1, 1, 0]
res = DecisionTree.predict(root, x)  # будет программистом
print(res)
