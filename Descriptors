class FloatValue:
    def __set_name__(self, owner, name):
        self.name = "_" + name

    def __get__(self, instance, owner):
        return instance.__dict__[self.name]

    def __set__(self, instance, value):
        if type(value) != float:
            raise TypeError("Присваивать можно только вещественный тип данных.")
        instance.__dict__[self.name] = value


class Cell:
    value = FloatValue()

    def __init__(self, value=0.0) -> None:
        self.value = value


class TableSheet:
    def __init__(self, N, M) -> None:
        self.cells = [[Cell() for _ in range(M)] for _ in range(N)]


n = 5
m = 3
table = TableSheet(n, m)
num = 1.0
for i in range(n):
    for j in range(m):
        table.cells[i][j].value = num
        num += 1.0

Объявите класс ValidateString для проверки корректности переданной строки. Объекты этого класса создаются командой:

validate = ValidateString(min_length=3, max_length=100)
где min_length - минимальное число символов в строке; max_length - максимальное число символов в строке.
В классе ValidateString должен быть реализован метод:

validate(self, string) - возвращает True, если string является строкой (тип str) и длина строки в пределах [min_length; max_length]. Иначе возвращается False.



class StringValue:
    def __init__(self, min_length, max_length) -> None:
        self.min_length = min_length
        self.max_length = max_length

    def __set_name__(self, owner, name):
        self.name = "_" + name

    def __set__(self, instance, value):
        if type(value) == str and self.min_length <= len(value) <= self.max_length:
            setattr(instance, self.name, value)

    def __get__(self, instance, owner):
        return getattr(instance, self.name)


class PriceValue:
    __min_value = 0

    def __init__(self, max_value) -> None:
        self.max_value = max_value

    def __set_name__(self, owner, name):
        self.name = "_" + name

    def __set__(self, instance, value):
        if type(value) in (int, float) and self.__min_value <= value <= self.max_value:
            setattr(instance, self.name, value)

    def __get__(self, instance, owner):
        return getattr(instance, self.name)


class Product:
    # pr = Product(наименование, цена)
    name = StringValue(2, 50)  # min_length - мин длина строки; max_length - макс длина
    price = PriceValue(10000)  # max_value максимально допустимое значение

    def __init__(self, name, price) -> None:
        self.name = name
        self.price = price


class SuperShop:
    # myshop = SuperShop(название магазина)
    def __init__(self, name_shop) -> None:
        self.name = name_shop
        self.goods = []

    def add_product(self, product):
        # добавление товара в магазин (в конец списка goods);
        if isinstance(product, Product):
            self.goods.append(product)

    def remove_product(self, product):
        # удаление товара из магазина (из списка goods).
        if isinstance(product, Product) and product in self.goods:
            self.goods.pop()


shop = SuperShop("Магазин №1")
shop.add_product(Product("Курс по Python", 0))
shop.add_product(Product("Курс по Python ООП", 2000))
for p in shop.goods:
    print(f"{p.name}: {p.price}")
