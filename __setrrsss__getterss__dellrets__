class Book:
    """
    book = Book()
    book = Book(название, автор, число страниц, год издания)
    В каждом объекте класса Book автоматически должны формироваться следующие локальные свойства:
    title - заголовок книги (строка, по умолчанию пустая строка);
    author - автор книги (строка, по умолчанию пустая строка);
    pages - число страниц (целое число, по умолчанию 0);
    year - год издания (целое число, по умолчанию 0).
    """

    dict_keys = {"title": str, "author": str, "pages": int, "year": int}

    def __init__(self, title="", author="", pages=0, year=0):
        self.title = title
        self.author = author
        self.pages = pages
        self.year = year

    def __setattr__(self, key, value):
        if key in self.dict_keys and self.dict_keys[key] == type(value):
            super().__setattr__(key, value)
        else:
            raise TypeError("Неверный тип присваиваемых данных.")


book = Book("Python", "М. Люц", 900, 2000)


class Product:
    __id_count = 1
    __attrs = {"name": (str,), "weight": (int, float), "price": (int, float)}
    # класс для представления отдельного товара. p = Product(название, вес, цена)
    def __init__(self, name, weight, price):
        self.id = self.__id_count
        Product.__id_count += 1

        self.name = name
        self.weight = weight
        self.price = price

    def __setattr__(self, key, value) -> None:
        if key in self.__attrs and type(value) in self.__attrs[key]:
            if (key == "price" or key == "weight") and value <= 0:
                raise TypeError("Неверный тип присваиваемых данных.")
        elif key in self.__attrs:
            raise TypeError("Неверный тип присваиваемых данных.")
        object.__setattr__(self, key, value)

    def __delattr__(self, item):
        if item == "id":
            raise AttributeError("Атрибут id удалять запрещено.")
        object.__delattr__(self, item)


class Shop:
    # Shop - класс для управления магазином в целом; shop = Shop(название магазина)
    def __init__(self, name):
        self.name = name
        self.goods = []  # - список товаров (изначально список пустой).

    # А также в классе объявить методы:

    def add_product(self, product):
        # - добавление нового товара в магазин (в конец списка goods);
        if isinstance(product, Product):
            self.goods.append(product)

    def remove_product(self, product):
        # - удаление товара product из магазина (из списка goods);
        if product in self.goods:
            self.goods.remove(product)


class Course:
    # - класс, отвечающий за управление курсом в целом;
    # course = Course(название курса)
    def __init__(self, name):
        self.name = name
        self.modules = []  # - список модулей в курсе (изначально список пуст).

    def add_module(self, module):
        # - добавление нового модуля в конце списка modules;
        if isinstance(module, Module):
            self.modules.append(module)

    def remove_module(self, indx):
        # - удаление модуля из списка modules по индексу в этом списке.
        if len(self.modules) >= indx:
            self.modules.pop(indx)


class Module:
    # - класс, описывающий один модуль (раздел) курса;
    # module = Module(название модуля)
    def __init__(self, name) -> None:
        self.name = name
        self.lessons = []

    def add_lesson(self, lesson):
        # - добавление в модуль (в конец списка lessons) нового урока (объекта класса LessonItem);
        if isinstance(lesson, LessonItem):
            self.lessons.append(lesson)

    def remove_lesson(self, indx):
        # - удаление урока по индексу в списке lessons.
        if len(self.lessons) >= indx:
            self.lessons.pop(indx)


class LessonItem:
    # - класс одного занятия (урока).
    # lesson = LessonItem(название урока, число практических занятий, общая длительность урока)
    __attrs = {"title": str, "practices": int, "duration": int}

    def __init__(self, title, practices, duration):
        self.title = title  # название урока (строка);
        self.practices = (
            practices  # - число практических занятий (целое положительное число);
        )
        self.duration = (
            duration  # - общая длительность урока (целое положительное число).
        )

    def __setattr__(self, key, value) -> None:
        if key in self.__attrs:
            if type(value) != self.__attrs[key]:
                raise TypeError("Неверный тип присваиваемых данных.")
        if (key == "practices" or key == "duration") and value <= 0:
            raise TypeError("Неверный тип присваиваемых данных.")

        super().__setattr__(key, value)

    def __getattr__(self, item):
        return False

    def __delattr__(self, item):
        if item in self.__attrs:
            raise AttributeError("Атрибут {item} удалять запрещено.")
        object.__delattr__(self, item)


class Museum:
    # mus = Museum(название музея)
    def __init__(self, name) -> None:
        self.name = name  # - название музея (строка);
        self.exhibits = []  # - список экспонатов (изначально пустой список).

    def add_exhibit(self, obj):
        # - добавление нового экспоната в музей (в конец списка exhibits);
        self.exhibits.append(obj)

    def remove_exhibit(self, obj):
        # - удаление экспоната из музея (из списка exhibits по ссылке obj - на экспонат)
        self.exhibits.remove(obj)

    def get_info_exhibit(self, indx):
        # - получение информации об экспонате (строка) по индексу списка (нумерация с нуля).
        # должен возвращать значение атрибута descr указанного экспоната в формате:
        # "Описание экспоната {name}: {descr}"
        obj = self.exhibits[indx]
        return f"Описание экспоната {obj.name}: {obj.descr}"


class Picture:
    def __init__(self, name, author, descr):
        self.name = name
        self.author = author
        self.descr = descr


class Mummies:
    def __init__(self, name, location, descr):
        self.name = name
        self.location = location
        self.descr = descr


class Papyri:
    def __init__(self, name, date, descr):
        self.name = name
        self.date = date
        self.descr = descr
